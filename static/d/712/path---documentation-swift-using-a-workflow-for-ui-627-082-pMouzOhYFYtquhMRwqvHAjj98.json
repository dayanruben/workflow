{"data":{"markdownRemark":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"Using a workflow to show UI"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ContainerViewController"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In the Workflow architecture, the container acts as the glue between the state-driven world of Workflows and the UI that is ultimately displayed. On iOS, the container is implemented as "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ContainerViewController"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"/// Binds a root workflow to a renderable view controller.\npublic final class ContainerViewController<Output>: UIViewController {\n\n    /// Emits output events from the bound workflow.\n    public let output: Signal<Output, NoError>\n\n    public init<WorkflowType>(workflow: WorkflowType, viewRegistry: ViewRegistry) where WorkflowType: Workflow, WorkflowType.Output == Output\n\n}\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The first initializer argument is the workflow that will drive your application."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The second initializer argument is the view registry. The view registry acts as a mapping between the view models ("},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Screen"}]},{"type":"text","value":"s) that your workflow emits and the concrete UI implementations that should be used to display them."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import UIKit\nimport Workflow\nimport WorkflowUI\n\n@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\n    var window: UIWindow?\n\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {\n        let window = UIWindow(frame: UIScreen.main.bounds)\n\n        var viewRegistry = ViewRegistry()\n\n        let container = ContainerViewController(\n            workflow: DemoWorkflow(),\n            viewRegistry: viewRegistry)\n\n        window.rootViewController = container\n        self.window = window\n        window.makeKeyAndVisible()\n        return true\n    }\n}\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Your project should compile at this point. It will crash as soon as the workflow emits a screen, however, because we have not registered any UI implementations with the view registry. Let's fix that:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"let workflow: Workflow<Screen, Never> = /// Instantiate a workflow\n\nvar viewRegistry = ViewRegistry()\n\nviewRegistry.register(screenViewControllerType: DemoScreenViewController.self)\n\nlet container = ContainerViewController(\n    workflow: DemoWorkflow(),\n    viewRegistry: viewRegistry)\n"}]}]}],"data":{"quirksMode":false}},"frontmatter":{"navigation":{"visible":true,"path":"documentation"},"title":"Using a Workflow to Show UI"}}},"pageContext":{"title":"Using a Workflow to Show UI","index":6,"slug":"/documentation/swift/using-a-workflow-for-ui/"}}